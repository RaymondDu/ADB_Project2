a) Team members:
Rongxin Du	rd2537
Chao Song	cs2994

b) List of files:
BingTest.java:
	our sourcefile including all the methods and the main thread;
KeyFinder.java:
	a helper class from Internet for finding value according to key in JSON files
TreeNode.java:
	the data structure for each node in the classification tree-hierarchy schema;Tree.java: 
	build the tree according to the given schema, i.e., root.txt, computers.txt, sports.txt, health.txt
root.txt:
	downloaded from http://www.cs.columbia.edu/~gravano/cs6111/Proj2/data/root.txt
computers.txt:
	downloaded from http://www.cs.columbia.edu/~gravano/cs6111/Proj2/data/computers.txt
sports.txt:
	downloaded from http://www.cs.columbia.edu/~gravano/cs6111/Proj2/data/sports.txt
health.txt:
	downloaded from http://www.cs.columbia.edu/~gravano/cs6111/Proj2/data/health.txt

Makefile				--our makefile
Readme					--our readme
commons-codec-1.7.jar			--a library for encode
json-simple-1.1.1.jar			--another library for parsing json file

c) 
To compile our program, type “make”.
To run our program, type “make run”
User will need to input arguments such as query and precision in the program. 

d, e)
Internal Design of our project:
workflow:
Step1: User input the site URL (the database you need to classify, e.g. fifa.com)When getTree is called, we will start building the tree in a top-bottom fashion recursively, from the “Root” node all the way to the leaf nodes.Step2: User input coverage and we set the coverage (need to be an Integer)Step3: User input specifity and we set the specifity (need to be a Double)
Step4: Initialize the classification-tree and classify the database, print out all the possible classification path that is big enough on both Coverage and Specifity
Step5: build content summary for each node in the classification path, except the leaf nodes, e.g. for Root->Sports->Soccer, we build content summary for node Root and node Sports
Implmentation:Our classification-tree looks like the following:
					Root
	Computers			Health				Sports
	children[0]			children[1]			children[2]
	words[0][:]			words[1][:]			words[2][:]
	coverage[0]			coverage[1]			coverage[2]
	specifity[0]			specifity[1]			specifity[2]
Hardware	Programming	Fitness		Diseases	Basketball	Soccer
children[0]	children[1]	children[0]	children[1]	children[0]	children[1]
words[0][:]	words[1][:]	words[0][:]	words[1][:]	words[0][:]	words[1][:]
coverage[0]	coverage[1]	coverage[0]	coverage[1]	coverage[0]	coverage[1]
specifity[0]	specifity[1]	specifity[0]	specifity[1]	specifity[0]	specifity[1]	

3. Parse the returned JSON string, retrieve the title, description and displayURL section for each query result. We use A Simple Java toolkit (jar file)for JSON from an open source project http://code.google.com/p/json-simple/
In addition, we also use the Example 5 - Stoppable SAX-like content handler in the DecodingExamples sections here: http://code.google.com/p/json-simple/wiki/DecodingExamples

f) account key
wRccq1TMy476bqFdC1GrKeHeJ33Fm+hmzSwYWgmtSrM=
